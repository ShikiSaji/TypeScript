name: Deploy to AWS EKS
on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: deploy to cluster
    runs-on: ubuntu-latest   
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
    
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: fill template
        env:
          DEPLOYMENT_NAME: test-deployment
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: test-images
        run: |
          DEPLOYMENT_NAME=$DEPLOYMENT_NAME 
          REGISTRY=$REGISTRY
          REPOSITORY=$REPOSITORY
          envsubst < k8s-template.yml > k8s-deployment.yml

      - name: list all files
        run: ls -la

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: test-images
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --pull -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest app
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

      - name: apply manifest
        uses: kodermax/kubectl-aws-eks@main
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: apply -f k8s-template.yml
      
      - name: rollout restart deployment
        uses: kodermax/kubectl-aws-eks@main
        env:
          DEPLOYMENT_NAME: test-deployment
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: rollout restart deployment/$DEPLOYMENT_NAME

      - name: wait for condition=Available
        uses: kodermax/kubectl-aws-eks@main
        env:
          DEPLOYMENT_NAME: wait for deployment
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: wait --for=condition=Available Deployment/$DEPLOYMENT_NAME --timeout=600s


      - name: get for condition=Available
        uses: kodermax/kubectl-aws-eks@main
        env:
          DEPLOYMENT_NAME: wait for deployment
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        with:
          args: get service $DEPLOYMENT_NAME-load-balancer -o jsonpath='http://{.status.loadBalancer.ingress[0].ip}' > service_url.txt
      
      - name: print service URL
        run: echo "Service exposed at $(cat service_url.txt)"
